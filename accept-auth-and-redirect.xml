<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC2617 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
  <!ENTITY RFC2629 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
  <!ENTITY RFC2743 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2743.xml">
  <!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
  <!ENTITY RFC4120 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4120.xml">
  <!ENTITY RFC4121 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4121.xml">
  <!ENTITY RFC4559 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4559.xml">
  <!ENTITY RFC5234 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
  <!ENTITY RFC7230 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
  <!ENTITY RFC7235 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7235.xml">
  <!ENTITY RFC7519 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml">
  <!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
  <!ENTITY InvokeWebRequest "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-7">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-williams-http-accept-auth-and-redirect-01" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <front>
    <title abbrev="Accept-Auth &amp; Redirect">Accept-Auth HTTP Header for 3xx/401 Negotiation, and Redirect Authentication Scheme</title>
    <author fullname="Nico Williams" initials="N.W." surname="Williams" role="editor">
      <organization>Cryptonector, LLC</organization>
      <address>
        <postal>
          <street></street>
          <city>Austin</city>
          <region>TX</region>
          <code></code>
          <country>USA</country>
        </postal>
        <phone></phone>
        <email>nico@cryptonector.com</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <date year="2020" />
    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>HTTP</keyword>
    <keyword>Authentication</keyword>
    <keyword>Negotiation</keyword>

    <abstract>
      <t>
        The Hyper-Text Transport Protocol (HTTP) offers several
        authentication schemes, but many sites use redirection-based
        protocols to authenticate users. Some servers are faced with a
        connundrum, having to choose between two mutually-exclusive
        options: redirect responses or 401 (authentication required)
        responses without knowing which the user-agent is most likely to
        support.
      </t>

      <t>
        This document specifies a new HTTP request header, "Accept-Auth",
        that user-agents may use to indicate their authentication
        capabilities, including support (or not) for chasing redirects.
        Also specified is a new HTTP authentication scheme named Redirect,
        operating via 3xx or 401 responses at the server's choice.
      </t>
    </abstract>

  </front>

  <middle>
    <section anchor="intro" title="Introduction">

      <t>
        The Hyper-Text Transport Protocol (HTTP) <xref
      target="RFC7230">RFC7230</xref> provides several schemes for user
        authentication.  There also are popular ways of authenticating users
        based on redirection rather than standard HTTP authentication schemes.
        Heretofore, HTTP has provided no standard way for servers to know
        which authentication schemes, including redirect-based methods, a
        given user-agent supports, but servers must choose between either
        redirection or HTTP authentication, and these two are mutually
        exclusive.
      </t>

      <t>
        This situation arises especially in corporate networks where
        JSON Web Tokens (JWT) <xref target="RFC7519"/> and Negotiate <xref
        target="RFC4559"/> are both used, the latter usually with the
        Kerberos <xref target="RFC4120"/> GSS-API <xref target="RFC2743"/>
        mechanism <xref target="RFC4121"/>.
      </t>

      <t>
        We address this problem by adding a new request header, "Accept-Auth:",
        by which a user-agent can indicate which HTTP authentication
        schemes, if any, it supports, including redirection.
      </t>

      <section title="Requirements Language">
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
          document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.
        </t>
      </section>
    </section>

    <section anchor="accept_auth" title="Accept-Auth">
      <t>
        The Accept-Auth request header may have multiple values, or be present
        multiple times, as with most HTTP headers.  Each value names one
        authentication schemes, and optionally may indicate schemes-specific
        metadata.
      </t>

      <t>
        One special value, a single asterisk, indicates that the user-agent
        is unwilling to list the authentication schemes it supports, but if
        sent, the server MAY assume that the user-agent supports
        redirection. Another special value, "None", indicates that the
        user-agent has no credentials and does not support even
        redirection.  User-agents SHOULD send no more than one special
        value, and SHOULD NOT send other values if they send one of those
        special values.
      </t>

      <t>
        Accept-Auth values are similar to WWW-Authenticate values <xref
        target="RFC7235"/>, but they do not have quite the same form, and they
        are not challenges.  Using ABNF <xref target="RFC5234"/>:"</t>
      <figure align="center" anchor="accept_auth_abnf">
        <preamble></preamble>
        <artwork align="left" type="abnf"><![CDATA[
; Can we use the RFC7230 #rule ABNF extension here?
Accept-Auth-values = Accept-Auth-value *( OWS ","
                                          OWS Accept-Auth-value )
Accept-Auth-value = auth-scheme [1*SP
                                 ( auth-param *( "+" auth-param ) ]
; The * auth-scheme indicates that the user-agent supports at least
; the use of redirection, and may support other schemes but does not
; wish to indicate which.  The None auth-scheme indicates that the
; user-agent does not wish to authenticate in any way.
auth-scheme = "*" / "None" / token
auth-param = token BWS "=" BWS ( token / quoted-string )
token          = 1*tchar
tchar          = "!" / "'" / "*" / "-" / "." / "^"
               / "_" / "`" / "|" / "~" / DIGIT / ALPHA
               ; any VCHAR, except delimiters; here we use "+"
               ; as a delimiter, so our token definition is
               ; different from RFC7230's.

BWS = <BWS, see [RFC7230], Section 3.2.3>
OWS = <OWS, see [RFC7230], Section 3.2.3>
quoted-string = <quoted-string, see [RFC7230], Section 3.2.6>
            ]]></artwork>
        <postamble>Accept-Auth value ABNF.</postamble>
      </figure>
    </section>

    <section anchor="redirect" title="The Redirect Authentication Scheme">
      <t>
        Many sites use redirect-based protocols, with the final
        redirection back to the origin effected via ECMAScript code in
        order to be able to set an Authorization header.  Such
        redirect-based protocols do not work for non-browser
        user-agents.
      </t>

      <t>
        Normally, user-agents do not copy response headers from redirect
        responses redirected requests.  One common non-browser
        user-agent, the <eref target="&InvokeWebRequest;">PowerShell
          command-line user-agent</eref>, has an option, <spanx
          style="verb">-PreserveAuthorizationOnRedirect</spanx> that
        causes it to copy Authorization headers from redirect responses
        to redirected requests.  This enables redirect-based workflows
        to work even though that user-agent is not a browser, lacks
        interaction capabilities, HTML rendering, or JavaScript support.
      </t>

      <t>
        Here we define the "Redirect" HTTP authentication scheme, consisting
        of these behaviors:

        <list style="symbols">
          <t>
            Servers needing to authenticate the user when the user-agent
            has advertised support for the Redirect authentication scheme
            SHOULD respond with a 401 with a "challenge" for the Redirect
            authentication scheme, in which case servers MUST include a
            Location header, and MAY include an Authorization header in the
            response that the user-agent then MUST copy to the redirected
            request if it chooses to follow the redirection.
          </t>

          <t>
            User-agents MUST recognize a 401 Redirect challenge as a form of
            redirection.
          </t>

          <t>
            User-agents SHOULD also consider challenges for other
            authentication schemes offered by the server.
          </t>

          <t>
            User-agents may consult the user (if interactive), and/or a
            local policy (e.g., a white-list of acceptable origins for
            redirections), in order to decide whether to follow the
            redirection.  Note that the redirected-to service should
            always have enough information to decide whether to accept
            or reject a redirection (e.g., via the Referer header), and
            SHOULD have and apply local policy of its own.
          </t>

          <t>
            Because the intent of a Redirect challenge is to authenticate,
            if the user-agent decides to follow the redirection, then the
            user-agent SHOULD use switch to the GET method for the
            redirected request, and upon being redirected back to the
            original server, the user-agent MUST switch back to the
            original method.
          </t>
        </list>
      </t>

      <t>
        Note that nothing in this document alters Cross-Origin Resource
        Sharing considerations regarding redirections.
      </t>
    </section>

    <section anchor="mixing" title="Mixing Redirection and Authentication Requests">
      <t>
        In HTTP, servers can either respond with a 3xx redirect, or a 401, but
        not both at once.  Besides the status codes, there is also response
        header content that is relevant to effecting a redirect or requesting
        authentication -- these two can be combined even if the status codes
        cannot.  Existing user-agents wouldn't respond in the obvious way
        because their response is generally keyed off of the server's response
        status code.
      </t>
      
      <t>
        User-agents that conform to this specification MUST support the
        Redirect authentication scheme as described in <xref
        target="redirect"/>.  Additionally, user-agents conforming to this
        specification MUST support the two cases described below as a
        degenerate form of the Redirect authentication scheme.
      </t>

      <section anchor="redirect_plus_auth" title="3xx Responses with WWW-Authenticate">
        <t>
          If a server responds with a 3xx and includes not only a Location
          header but also a WWW-Authenticate header, then the redirect
          denotes intent to authenticate the user.  In this case, the
          user-agent SHALL consider the response to be either a redirect or
          a request to authenticate, at the user-agent's choice.  The HTTP
          method to use at the new Location SHALL be as specified for the
          status code used by the server.
        </t>
      </section>

      <section anchor="auth_plus_location" title="401 Responses with Location">
        <t>
          If a server responds with a 401 and includes not just a
          WWW-Authenticate header but also a Location header, then the
          Location header's presence denotes the intent to authenticate the
          user either via the server's authentication scheme offerings, or
          redirection.  In this case, a user-agent conforming to this
          specification SHALL consider the response to be either a redirect
          or a request to authenticate, at the user-agent's choice, and
          SHOULD pick and execute one of those two options.  The user-agent
          SHOULD use the GET method at the new Location, with the expectation
          of eventually being redirected back to the original URI authority,
          at which point the user-agent, if it chooses to retry the
          original request, SHOULD use the original method.
        </t>
      </section>
    </section>

    <section title="Auth-params for Selected Authentication Mechanisms">
      <t>
        We specify here a few OPTIONAL parameters for existing HTTP
        authentication schemes that user-agents may use to convey relevant
        information to a server.
      </t>

      <t>
        <list style="symbols">
          <t>
            For the Basic <xref target="RFC2617"/> authentication mechanism,
            user-agents MAY include a "realm" parameter.
          </t>

          <t>
            For the Digest <xref target="RFC2617"/> authentication mechanism,
            user-agents MAY include "realm", "domain", "algorithm", and
            "qop-options" parameters.
          </t>

          <t>
            For the Negotiate <xref target="RFC4559"/> authentication mechanism,
            user-agents MAY include a "mechs" auth-param whose value is a
            whitespace-separate list of Object IDentifiers (OIDs) in dotted
            number notation.
          </t>

          <t>
            For the Redirect authentication mechanism defined here, we define
            an auth-param, "auth-svcs" whose value is a list of
            whitespace-separated domainnames that the user-agent will follow
            redirections to.
          </t>
        </list>
      </t>

    </section>

    <section title="Server-Side Selection of Authentication Schemes">
      <t>
        Servers that support only one authentication scheme have no difficulty
        choosing which scheme to use.  For other servers, when the user-agent
        does not include the Accept-Auth header in its request, we have no
        advice.  When a server supports multiple authentication schemes and the
        user-agent does include the Accept-Auth header in its request, then the
        server SHOULD select at least one scheme for a 401 response's
        WWW-Authenticate header that the user-agent also supports, but the
        server MAY respond with a 3xx redirect response if the user-agent
        advertised support for the Redirect scheme, or advertised the "*"
        special scheme name.
      </t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
        Simo Sorce, Viktor Dukhovni, Bill Bernsen, Andrew Brown, and
        Geoffrey Thomas provided feedback and some review.
      </t>
    </section>

    <section title="IANA Considerations">
      <t>
        IANA is directed to register the Accept-Auth header in the message
        header registry, as well as the Redirect authentication
        scheme in the HTTP Authentication Scheme registry.
      </t>

      <t>
        There is no registry for auth-params for HTTP authentication
        schemes, nor do we request the creation of such a registry.  The
        auth-params used here bear some relation to those of the
        authentication schemes they are used with, but they are essentially
        a distinct namespace.  Future additions of auth-params for use in
        the Accept-Auth header will have to update this document.
      </t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>
        The Accept-Auth header is security-relevant as it helps negotiate
        authentication, which is a positive consideration.  Negative
        security considerations include multi-level negotiation issues
        <xref target="multi_level_nego"/>, as well as a privacy concern:
        that the Accept-Auth header may help fingerprint user-agents.
      </t>

      <t>
        Also, the Authorization header preservation behavior allows
        attackers to convey malformed tokens to victim servers, allowing
        them to probe for parsing bugs.  However, this is essentially
        already true for the URI itself.
      </t>

      <t>
        One non-concern is that servers could cause user-agents to
        engage in authentication schemes they shouldn't want to -- that
        is a possibility regardless of whether the user-agent advertises
        support for an authentication scheme or not.  As usual, local
        policy is relevant.
      </t>

      <t>
        The special Accept-Auth value '*' can be used to reduce the
        user-agent's fingerprint, at the cost of limiting the server's
        knowledge of what authentication schemes the user-agent supports.
      </t>

      <section anchor="multi_level_nego" title="Multi-Level Negotiation">
        <t>
          One important security consideration of the Accept-Auth header is that
          it may lead to multiple levels of negotiation (e.g., via the Negotiate
          <xref target="RFC4559"/> authentication method).  Multi-level
          negotiations can fail to select to select a workable option, or may
          select a sub-optimal (e.g., less secure) option.
        </t>

        <t>
          For example, a user-agent might be able to use Digest
          authentication and Negotiate with some GSS-API <xref
          target="RFC2743"/> mechanism X, while the server might be able to
          use Digest and Negotiate with some GSS-API mechanism Y, and the
          server might prefer Y.  If the server knows only that the
          user-agent supports Digest and Negotiate, but not that the
          user-agent does not support GSS-API mechanism Y, then the server
          may send a challenge to use Negotiate and then the whole
          negotiation will fail.
        </t>

        <t>
          In the above example the user-agent could recover by retrying
          without advertising Negotiate in its Accept-Auth header, but the
          user-agent is not likely to do this on account of that being too
          complex.  Neither the user-agent nor the server are likely to
          detect and recover from sub-optimal selections.
        </t>

        <t>
          To avoid this failure more, user-agents SHOULD use auth-params to
          convey information that the server might need to make an
          appropriate.
        </t>
      </section>
    </section>
  </middle>
  <back>

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->
    <references title="Normative References">
      <!--?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;
      &RFC2617;
      &RFC4559;
      &RFC7230;
      &RFC7235;
      &RFC5234;
    </references>

    <references title="Informative References">
      &RFC2743;
      &RFC4120;
      &RFC4121;
      &RFC7519;
    </references>
  </back>
</rfc>
